#(c) Adarsh-Goel
import os
import asyncio
from asyncio import TimeoutError
from Adarsh.bot import StreamBot
from Adarsh.utils.database import Database
from Adarsh.utils.human_readable import humanbytes
from Adarsh.vars import Var
from urllib.parse import quote_plus
from pyrogram import filters, Client
from pyrogram.errors import FloodWait, UserNotParticipant
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from Adarsh.utils.file_properties import get_name, get_hash, get_media_file_size
db = Database(Var.DATABASE_URL, Var.SESSION_NAME)


MY_PASS = os.environ.get("MY_PASS",None)
pass_dict = {}
pass_db = Database(Var.DATABASE_URL, "ag_passwords")


@StreamBot.on_message((filters.regex(" ü·¥è…¢…™…¥üîë") | filters.command("login")) & ~filters.edited, group=4)
async def login_handler(c: Client, m: Message):
    try:
        try:
            ag = await m.reply_text("**…¥·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á ·¥ò·¥Äss·¥°·¥è Ä·¥Ö.**\n\n **…™“ì  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥° ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á** MY_PASS **·¥†·¥Ä Ä…™·¥Ä ô ü·¥á …™…¥  ú·¥á Ä·¥è·¥ã·¥ú** \n\n( è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á /cancel ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss)")
            _text = await c.listen(m.chat.id, filters=filters.text, timeout=90)
            if _text.text:
                textp = _text.text
                if textp=="/cancel":
                   await ag.edit("**·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è**")
                   return
            else:
                return
        except TimeoutError:
            await ag.edit("**…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä…™·¥õ ·¥ç·¥è Ä·¥á “ì·¥è Ä ·¥ò·¥Äss·¥°·¥è Ä·¥Ö, ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥**")
            return
        if textp == MY_PASS:
            await pass_db.add_user_pass(m.chat.id, textp)
            ag_text = "** è·¥á·¥Ä ú !  è·¥è·¥ú ·¥á…¥·¥õ·¥á Ä·¥á·¥Ö ·¥õ ú·¥á ·¥ò·¥Äss·¥°·¥è Ä·¥Ö ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è**"
        else:
            ag_text = "**·¥° Ä·¥è…¥…¢ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö, ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥**"
        await ag.edit(ag_text)
    except Exception as e:
        print(e)

@StreamBot.on_message((filters.private) & (filters.document | filters.video | filters.audio | filters.photo) & ~filters.edited, group=4)
async def private_receive_handler(c: Client, m: Message):
    if MY_PASS:
        check_pass = await pass_db.get_user_pass(m.chat.id)
        if check_pass== None:
            await m.reply_text("** ü·¥è…¢…™…¥ “ì…™ Äs·¥õ ·¥ús…™…¥…¢ /login ·¥Ñ·¥ç·¥Ö** \n**·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥° ·¥õ ú·¥á ·¥ò·¥Äss·¥°·¥è Ä·¥Ö ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ @themastertheblaster**")
            return
        if check_pass != MY_PASS:
            await pass_db.delete_user(m.chat.id)
            return
    if not await db.is_user_exist(m.from_user.id):
        await db.add_user(m.from_user.id)
        await c.send_message(
            Var.BIN_CHANNEL,
            f"N·¥á·¥° Us·¥á Ä J·¥è…™…¥·¥á·¥Ö : \n\n N·¥Ä·¥ç·¥á : [{m.from_user.first_name}](tg://user?id={m.from_user.id}) S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Y·¥è·¥ú Ä B·¥è·¥õ !!"
        )
    if Var.UPDATES_CHANNEL != "None":
        try:
            user = await c.get_chat_member(Var.UPDATES_CHANNEL, m.chat.id)
            if user.status == "kicked":
                await c.send_message(
                    chat_id=m.chat.id,
                    text="** è·¥è·¥ú' Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö..**",
                    parse_mode="markdown",
                    disable_web_page_preview=True
                )
                return 
        except UserNotParticipant:
            await c.send_message(
                chat_id=m.chat.id,
                text="""<i>·¥ä·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á..**</i>""",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("·¥ä·¥è…™…¥ …¥·¥è·¥°", url=f"https://t.me/{Var.UPDATES_CHANNEL}")
                        ]
                    ]
                ),
                parse_mode="HTML"
            )
            return
        except Exception as e:
            await m.reply_text(e)
            await c.send_message(
                chat_id=m.chat.id,
                text="**·¥Ä·¥Ö·¥Ö “ì·¥è Ä·¥Ñ·¥á s·¥ú ô ·¥õ·¥è ·¥Ä…¥ è ·¥Ñ ú·¥Ä…¥…¥·¥á ü**",
                parse_mode="markdown",
                disable_web_page_preview=True)
            return
    try:

        log_msg = await m.forward(chat_id=Var.BIN_CHANNEL)
        stream_link = f"{Var.URL}watch/{str(log_msg.message_id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
        
        online_link = f"{Var.URL}{str(log_msg.message_id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
       
        
        

        msg_text ="""
<b> è·¥è·¥ú Ä  ü…™…¥·¥ã …™s …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö...</b>‚ö°

<b>üìß “ì…™ ü·¥á …¥·¥Ä·¥ç·¥á :- </b> <i><b>{}</b></i>

<b>üì¶ “ì…™ ü·¥á s…™·¥¢·¥á :- </b> <i><b>{}</b></i>

<b>üíå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã :- </b> <i><b>{}</b></i>

<b>üñ• ·¥°·¥Ä è·¥Ñ ú ·¥è…¥ ü…™…¥·¥á :- </b> <i><b>{}</b></i>

<b>ü™© ·¥õ ú…™s  ü…™…¥·¥ã …™s ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ·¥Ä…¥·¥Ö ·¥°·¥è…¥'·¥õ …¢·¥á·¥õs ·¥áx·¥ò…™ Ä·¥á·¥Ö ‚ôªÔ∏è\n\n@mkv_blasters</b>"""

        await log_msg.reply_text(text=f"**R·¥áQ·¥ú·¥áÍú±·¥õ·¥á·¥Ö  ô è :** [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n**UÍú±·¥á Ä …™·¥Ö :** `{m.from_user.id}`\n**s·¥õ Ä·¥á·¥Ä·¥ç  ü…™…¥·¥ã :** {stream_link}", disable_web_page_preview=True, parse_mode="Markdown", quote=True)
        await m.reply_text(
            text=msg_text.format(get_name(log_msg), humanbytes(get_media_file_size(m)), online_link, stream_link),
            parse_mode="HTML", 
            quote=True,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú üñ•Ô∏è", url=stream_link), #Stream Link
                                                InlineKeyboardButton("üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", url=online_link)]]) #online Link
        )
    except FloodWait as e:
        print(f"**s ü·¥á·¥á·¥ò…™…¥…¢ “ì·¥è Ä** {str(e.x)}s")
        await asyncio.sleep(e.x)
        await c.send_message(chat_id=Var.BIN_CHANNEL, text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(e.x)}s from [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n\n**ùöÑùöúùöéùöõ ùô∏ùô≥ :** `{str(m.from_user.id)}`", disable_web_page_preview=True, parse_mode="Markdown")


@StreamBot.on_message(filters.channel & ~filters.group & (filters.document | filters.video | filters.photo) & ~filters.edited & ~filters.forwarded, group=-1)
async def channel_receive_handler(bot, broadcast):
    if MY_PASS:
        check_pass = await pass_db.get_user_pass(broadcast.chat.id)
        if check_pass == None:
            await broadcast.reply_text("** ü·¥è…¢…™…¥ “ì…™ Äs·¥õ ·¥ús…™…¥…¢ /login ·¥Ñ·¥ç·¥Ö** \n**·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥° ·¥õ ú·¥á ·¥ò·¥Äss ?  Ä·¥áœô·¥ú·¥ás·¥õ …™·¥õ “ì Ä·¥è·¥ç @themastertheblaster**")
            return
        if check_pass != MY_PASS:
            await broadcast.reply_text("**·¥° Ä·¥è…¥…¢ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö ,  ü·¥è…¢…™…¥ ·¥Ä…¢·¥Ä…™…¥**")
            await pass_db.delete_user(broadcast.chat.id)
            return
    if int(broadcast.chat.id) in Var.BANNED_CHANNELS:
        await bot.leave_chat(broadcast.chat.id)
        return
    try:
        log_msg = await broadcast.forward(chat_id=Var.BIN_CHANNEL)
        stream_link = f"{Var.URL}watch/{str(log_msg.message_id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"       
        online_link = f"{Var.URL}{str(log_msg.message_id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
        await log_msg.reply_text(
            text=f"**C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á:** `{broadcast.chat.title}`\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{broadcast.chat.id}`\n**R·¥á«´·¥ú·¥ás·¥õ ·¥ú Ä ü:** {stream_link}",
            quote=True,
            parse_mode="Markdown"
        )
        await bot.edit_message_reply_markup(
            chat_id=broadcast.chat.id,
            message_id=broadcast.message_id,
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú üñ•Ô∏è", url=stream_link), #Stream Link
                     InlineKeyboardButton("üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", url=online_link)]]) #Online Link
        )
    except FloodWait as w:
        print(f"**s ü·¥á·¥á·¥ò…™…¥…¢ “ì·¥è Ä** {str(w.x)}s")
        await asyncio.sleep(w.x)
        await bot.send_message(chat_id=Var.BIN_CHANNEL,
                             text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(w.x)}s from {broadcast.chat.title}\n\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{str(broadcast.chat.id)}`",
                             disable_web_page_preview=True, parse_mode="Markdown")
    except Exception as e:
        await bot.send_message(chat_id=Var.BIN_CHANNEL, text=f"**#·¥á Ä Ä·¥è Ä_·¥õ Ä·¥Ä·¥Ñ·¥á ô·¥Ä·¥Ñ·¥ã:** `{e}`", disable_web_page_preview=True, parse_mode="Markdown")
        print(f"C·¥Ä…¥'·¥õ E·¥Ö…™·¥õ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á!\nE Ä Ä·¥è Ä:  **Give me edit permission in updates and bin Chanell{e}**")
